[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ifc-json-chunking"
version = "0.1.0"
description = "A Python package for processing and chunking Industry Foundation Classes (IFC) data in JSON format"
authors = ["IFC JSON Chunking Team <team@ifcjsonchunking.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/m2ix4i/JSON-Chunking"
repository = "https://github.com/m2ix4i/JSON-Chunking"
documentation = "https://github.com/m2ix4i/JSON-Chunking/docs"
keywords = ["ifc", "json", "chunking", "bim", "construction"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
packages = [{include = "ifc_json_chunking", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
# Core dependencies
aiofiles = "^24.1.0"
aiohttp = "^3.9.0"
pydantic = "^2.5.0"
structlog = "^23.2.0"
typer = "^0.9.0"
rich = "^14.1.0"
# JSON processing
ujson = "^5.9.0"
ijson = "^3.2.0"
# System monitoring
psutil = "^5.9.0"
# Configuration
python-dotenv = "^1.0.0"
# Async support
asyncio-mqtt = {version = "^0.16.0", optional = true}

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
# Code quality
black = "^23.12.0"
isort = "^6.0.1"
mypy = "^1.8.0"
ruff = "^0.12.5"
# Pre-commit hooks
pre-commit = "^3.6.0"
# Documentation
sphinx = "^7.2.0"
sphinx-rtd-theme = "^2.0.0"
myst-parser = "^3.0.1"
# Development tools
ipython = "^8.18.0"
ipdb = "^0.13.0"

[tool.poetry.group.test.dependencies]
# Additional test dependencies
factory-boy = "^3.3.0"
freezegun = "^1.4.0"
responses = "^0.24.0"

[tool.poetry.extras]
mqtt = ["asyncio-mqtt"]
all = ["asyncio-mqtt"]

[tool.poetry.scripts]
ifc-chunking = "ifc_json_chunking.cli:main"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/ifc_json_chunking",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]